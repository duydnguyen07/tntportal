{
    "pipes": [],
    "interfaces": [
        {
            "name": "CreatePayload",
            "id": "interface-CreatePayload-4613cd83d35e292c60cce89568192f36",
            "file": "src/app/@core/application-service.service.ts",
            "type": "interface",
            "sourceCode": "import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { FormConfig, FormState } from '@app/@shared/application-form/application-form.model';\n\ninterface CreatePayload extends Omit<FormConfig, \"id\" | \"published_at\" | \"created_at\" | \"updated_at\"> {\n  CertificatePasscode: string;\n}\n\nexport type ErrorCode = 'ID_INVALID' | 'PASSCODE_INVALID'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApplicationService {\n\n  constructor(private httpClient: HttpClient) { }\n\n  create(payload: CreatePayload): Observable<Object> {\n    return this.httpClient.post<FormConfig>('/workorders', payload, {\n      headers: new HttpHeaders({'Content-Type': 'application/json'})\n    })\n  }\n\n  get(id: number): Observable<FormConfig> {\n    return this.httpClient.get<FormConfig>(`/workorders/${id}`)\n  }\n\n  getWithPasscode(id: string, passcode: string) {\n    return this.httpClient.post<FormConfig| {ERROR_CODE: ErrorCode}>(\n      `/workorders/passcode/${id}`,\n      { passcode },\n      { headers: new HttpHeaders({'Content-Type': 'application/json'}) }\n    )\n  }\n}\n",
            "properties": [
                {
                    "name": "CertificatePasscode",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "Omit"
        },
        {
            "name": "Credentials",
            "id": "interface-Credentials-6ce7bd431bf8d8c49a82d9d9babaa936",
            "file": "src/app/auth/credentials.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nexport interface Credentials {\n  // Customize received credentials here\n  username: string;\n  token: string;\n}\n\nconst credentialsKey = 'credentials';\n\n/**\n * Provides storage for authentication credentials.\n * The Credentials interface should be replaced with proper implementation.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CredentialsService {\n  private _credentials: Credentials | null = null;\n\n  constructor() {\n    const savedCredentials = sessionStorage.getItem(credentialsKey) || localStorage.getItem(credentialsKey);\n    if (savedCredentials) {\n      this._credentials = JSON.parse(savedCredentials);\n    }\n  }\n\n  /**\n   * Checks is the user is authenticated.\n   * @return True if the user is authenticated.\n   */\n  isAuthenticated(): boolean {\n    return !!this.credentials;\n  }\n\n  /**\n   * Gets the user credentials.\n   * @return The user credentials or null if the user is not authenticated.\n   */\n  get credentials(): Credentials | null {\n    return this._credentials;\n  }\n\n  /**\n   * Sets the user credentials.\n   * The credentials may be persisted across sessions by setting the `remember` parameter to true.\n   * Otherwise, the credentials are only persisted for the current session.\n   * @param credentials The user credentials.\n   * @param remember True to remember credentials across sessions.\n   */\n  setCredentials(credentials?: Credentials, remember?: boolean) {\n    this._credentials = credentials || null;\n\n    if (credentials) {\n      const storage = remember ? localStorage : sessionStorage;\n      storage.setItem(credentialsKey, JSON.stringify(credentials));\n    } else {\n      sessionStorage.removeItem(credentialsKey);\n      localStorage.removeItem(credentialsKey);\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "token",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "username",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CustomerInformation",
            "id": "interface-CustomerInformation-31b5aea889899c43a233b912c297b6a0",
            "file": "src/app/@shared/application-form/application-form.model.ts",
            "type": "interface",
            "sourceCode": "export interface FormConfig {\n  id: number;\n  State: FormState;\n  PriceUSD: number;\n  AcknowledgementInitials: string;\n  AcknowledgementText: string;\n  published_at: string;\n  created_at: string;\n  updated_at: string;\n  CustomerInformation: CustomerInformation;\n  VehicleInformation: VehicleInformation;\n  Certificate: Upload[];\n}\n\nexport type FormState = 'New' | 'InProgress' | 'Canceled' | 'Completed';\n\nexport interface CustomerInformation {\n  FirstName: string;\n  LastName: string;\n  Date: string;\n  Address: string;\n  City: string;\n  State: string;\n  Zipcode: string;\n  Phone: string;\n  Email: string;\n}\n\nexport interface VehicleInformation {\n  Year: number;\n  Make: string;\n  Model: string;\n  License: string;\n  Mileage: string;\n  VIN: string;\n}\n\nexport interface Upload {\n  id: number;\n  name: string;\n  hash: string;\n  mime: 'application/pdf';\n  size: number;\n  url: string;\n  provider: 'aws-s3';\n  created_at: string; //e.g. \"2021-04-06T15:22:02.464Z\"\n  updated_at: string; //\"2021-04-06T15:22:02.464Z\"\n}\n\nexport type Controls = {\n  [value in ControlName]: any;\n}\n\nexport enum ControlName {\n  firstName=\"firstName\",\n  lastName=\"lastName\",\n  address=\"address\",\n  city=\"city\",\n  state=\"state\",\n  zipcode=\"zipcode\",\n  phone=\"phone\",\n  email=\"email\",\n  date=\"date\",\n  year=\"year\",\n  make=\"make\",\n  model=\"model\",\n  license=\"license\",\n  mileage=\"mileage\",\n  vin=\"vin\",\n  price=\"price\",\n  initials=\"initials\",\n  acknowledgementText=\"acknowledgementText\"\n}\n  \n",
            "properties": [
                {
                    "name": "Address",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "City",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "Date",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "Email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "FirstName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "LastName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "Phone",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "State",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "Zipcode",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "FormConfig",
            "id": "interface-FormConfig-31b5aea889899c43a233b912c297b6a0",
            "file": "src/app/@shared/application-form/application-form.model.ts",
            "type": "interface",
            "sourceCode": "export interface FormConfig {\n  id: number;\n  State: FormState;\n  PriceUSD: number;\n  AcknowledgementInitials: string;\n  AcknowledgementText: string;\n  published_at: string;\n  created_at: string;\n  updated_at: string;\n  CustomerInformation: CustomerInformation;\n  VehicleInformation: VehicleInformation;\n  Certificate: Upload[];\n}\n\nexport type FormState = 'New' | 'InProgress' | 'Canceled' | 'Completed';\n\nexport interface CustomerInformation {\n  FirstName: string;\n  LastName: string;\n  Date: string;\n  Address: string;\n  City: string;\n  State: string;\n  Zipcode: string;\n  Phone: string;\n  Email: string;\n}\n\nexport interface VehicleInformation {\n  Year: number;\n  Make: string;\n  Model: string;\n  License: string;\n  Mileage: string;\n  VIN: string;\n}\n\nexport interface Upload {\n  id: number;\n  name: string;\n  hash: string;\n  mime: 'application/pdf';\n  size: number;\n  url: string;\n  provider: 'aws-s3';\n  created_at: string; //e.g. \"2021-04-06T15:22:02.464Z\"\n  updated_at: string; //\"2021-04-06T15:22:02.464Z\"\n}\n\nexport type Controls = {\n  [value in ControlName]: any;\n}\n\nexport enum ControlName {\n  firstName=\"firstName\",\n  lastName=\"lastName\",\n  address=\"address\",\n  city=\"city\",\n  state=\"state\",\n  zipcode=\"zipcode\",\n  phone=\"phone\",\n  email=\"email\",\n  date=\"date\",\n  year=\"year\",\n  make=\"make\",\n  model=\"model\",\n  license=\"license\",\n  mileage=\"mileage\",\n  vin=\"vin\",\n  price=\"price\",\n  initials=\"initials\",\n  acknowledgementText=\"acknowledgementText\"\n}\n  \n",
            "properties": [
                {
                    "name": "AcknowledgementInitials",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "AcknowledgementText",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "Certificate",
                    "type": "Upload[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "created_at",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "CustomerInformation",
                    "type": "CustomerInformation",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "PriceUSD",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "published_at",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "State",
                    "type": "FormState",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "updated_at",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "VehicleInformation",
                    "type": "VehicleInformation",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LoginContext",
            "id": "interface-LoginContext-aff5ce8e1b7ac94c6c9d1ef665d6a969",
            "file": "src/app/auth/authentication.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { Credentials, CredentialsService } from './credentials.service';\n\nexport interface LoginContext {\n  username: string;\n  password: string;\n  remember?: boolean;\n}\n\n/**\n * Provides a base for authentication workflow.\n * The login/logout methods should be replaced with proper implementation.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthenticationService {\n  constructor(private credentialsService: CredentialsService) {}\n\n  /**\n   * Authenticates the user.\n   * @param context The login parameters.\n   * @return The user credentials.\n   */\n  login(context: LoginContext): Observable<Credentials> {\n    // Replace by proper authentication call\n    const data = {\n      username: context.username,\n      token: '123456',\n    };\n    this.credentialsService.setCredentials(data, context.remember);\n    return of(data);\n  }\n\n  /**\n   * Logs out the user and clear credentials.\n   * @return True if the user was logged out successfully.\n   */\n  logout(): Observable<boolean> {\n    // Customize credentials invalidation here\n    this.credentialsService.setCredentials();\n    return of(true);\n  }\n}\n",
            "properties": [
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "remember",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "username",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "RandomQuoteContext",
            "id": "interface-RandomQuoteContext-1fd4f72eb91ba58d772d2f98776f06d0",
            "file": "src/app/home/quote.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nconst routes = {\n  quote: (c: RandomQuoteContext) => `/jokes/random?category=${c.category}`,\n};\n\nexport interface RandomQuoteContext {\n  // The quote's category: 'dev', 'explicit'...\n  category: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QuoteService {\n  constructor(private httpClient: HttpClient) {}\n\n  getRandomQuote(context: RandomQuoteContext): Observable<string> {\n    return this.httpClient.get(routes.quote(context)).pipe(\n      map((body: any) => body.value),\n      catchError(() => of('Error, could not load joke :-('))\n    );\n  }\n}\n",
            "properties": [
                {
                    "name": "category",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Upload",
            "id": "interface-Upload-31b5aea889899c43a233b912c297b6a0",
            "file": "src/app/@shared/application-form/application-form.model.ts",
            "type": "interface",
            "sourceCode": "export interface FormConfig {\n  id: number;\n  State: FormState;\n  PriceUSD: number;\n  AcknowledgementInitials: string;\n  AcknowledgementText: string;\n  published_at: string;\n  created_at: string;\n  updated_at: string;\n  CustomerInformation: CustomerInformation;\n  VehicleInformation: VehicleInformation;\n  Certificate: Upload[];\n}\n\nexport type FormState = 'New' | 'InProgress' | 'Canceled' | 'Completed';\n\nexport interface CustomerInformation {\n  FirstName: string;\n  LastName: string;\n  Date: string;\n  Address: string;\n  City: string;\n  State: string;\n  Zipcode: string;\n  Phone: string;\n  Email: string;\n}\n\nexport interface VehicleInformation {\n  Year: number;\n  Make: string;\n  Model: string;\n  License: string;\n  Mileage: string;\n  VIN: string;\n}\n\nexport interface Upload {\n  id: number;\n  name: string;\n  hash: string;\n  mime: 'application/pdf';\n  size: number;\n  url: string;\n  provider: 'aws-s3';\n  created_at: string; //e.g. \"2021-04-06T15:22:02.464Z\"\n  updated_at: string; //\"2021-04-06T15:22:02.464Z\"\n}\n\nexport type Controls = {\n  [value in ControlName]: any;\n}\n\nexport enum ControlName {\n  firstName=\"firstName\",\n  lastName=\"lastName\",\n  address=\"address\",\n  city=\"city\",\n  state=\"state\",\n  zipcode=\"zipcode\",\n  phone=\"phone\",\n  email=\"email\",\n  date=\"date\",\n  year=\"year\",\n  make=\"make\",\n  model=\"model\",\n  license=\"license\",\n  mileage=\"mileage\",\n  vin=\"vin\",\n  price=\"price\",\n  initials=\"initials\",\n  acknowledgementText=\"acknowledgementText\"\n}\n  \n",
            "properties": [
                {
                    "name": "created_at",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "hash",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "mime",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "provider",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "size",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "updated_at",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "VehicleInformation",
            "id": "interface-VehicleInformation-31b5aea889899c43a233b912c297b6a0",
            "file": "src/app/@shared/application-form/application-form.model.ts",
            "type": "interface",
            "sourceCode": "export interface FormConfig {\n  id: number;\n  State: FormState;\n  PriceUSD: number;\n  AcknowledgementInitials: string;\n  AcknowledgementText: string;\n  published_at: string;\n  created_at: string;\n  updated_at: string;\n  CustomerInformation: CustomerInformation;\n  VehicleInformation: VehicleInformation;\n  Certificate: Upload[];\n}\n\nexport type FormState = 'New' | 'InProgress' | 'Canceled' | 'Completed';\n\nexport interface CustomerInformation {\n  FirstName: string;\n  LastName: string;\n  Date: string;\n  Address: string;\n  City: string;\n  State: string;\n  Zipcode: string;\n  Phone: string;\n  Email: string;\n}\n\nexport interface VehicleInformation {\n  Year: number;\n  Make: string;\n  Model: string;\n  License: string;\n  Mileage: string;\n  VIN: string;\n}\n\nexport interface Upload {\n  id: number;\n  name: string;\n  hash: string;\n  mime: 'application/pdf';\n  size: number;\n  url: string;\n  provider: 'aws-s3';\n  created_at: string; //e.g. \"2021-04-06T15:22:02.464Z\"\n  updated_at: string; //\"2021-04-06T15:22:02.464Z\"\n}\n\nexport type Controls = {\n  [value in ControlName]: any;\n}\n\nexport enum ControlName {\n  firstName=\"firstName\",\n  lastName=\"lastName\",\n  address=\"address\",\n  city=\"city\",\n  state=\"state\",\n  zipcode=\"zipcode\",\n  phone=\"phone\",\n  email=\"email\",\n  date=\"date\",\n  year=\"year\",\n  make=\"make\",\n  model=\"model\",\n  license=\"license\",\n  mileage=\"mileage\",\n  vin=\"vin\",\n  price=\"price\",\n  initials=\"initials\",\n  acknowledgementText=\"acknowledgementText\"\n}\n  \n",
            "properties": [
                {
                    "name": "License",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "Make",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "Mileage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "Model",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "VIN",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "Year",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ApplicationService",
            "id": "injectable-ApplicationService-4613cd83d35e292c60cce89568192f36",
            "file": "src/app/@core/application-service.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "payload",
                            "type": "CreatePayload"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Object>",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "CreatePayload",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<FormConfig>",
                    "typeParameters": [],
                    "line": 25,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getWithPasscode",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        },
                        {
                            "name": "passcode",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "passcode",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { FormConfig, FormState } from '@app/@shared/application-form/application-form.model';\n\ninterface CreatePayload extends Omit<FormConfig, \"id\" | \"published_at\" | \"created_at\" | \"updated_at\"> {\n  CertificatePasscode: string;\n}\n\nexport type ErrorCode = 'ID_INVALID' | 'PASSCODE_INVALID'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApplicationService {\n\n  constructor(private httpClient: HttpClient) { }\n\n  create(payload: CreatePayload): Observable<Object> {\n    return this.httpClient.post<FormConfig>('/workorders', payload, {\n      headers: new HttpHeaders({'Content-Type': 'application/json'})\n    })\n  }\n\n  get(id: number): Observable<FormConfig> {\n    return this.httpClient.get<FormConfig>(`/workorders/${id}`)\n  }\n\n  getWithPasscode(id: string, passcode: string) {\n    return this.httpClient.post<FormConfig| {ERROR_CODE: ErrorCode}>(\n      `/workorders/passcode/${id}`,\n      { passcode },\n      { headers: new HttpHeaders({'Content-Type': 'application/json'}) }\n    )\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthenticationService",
            "id": "injectable-AuthenticationService-aff5ce8e1b7ac94c6c9d1ef665d6a969",
            "file": "src/app/auth/authentication.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "context",
                            "type": "LoginContext"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Credentials>",
                    "typeParameters": [],
                    "line": 27,
                    "description": "<p>Authenticates the user.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 575,
                                "end": 582,
                                "flags": 0,
                                "escapedText": "context"
                            },
                            "type": "LoginContext",
                            "tagName": {
                                "pos": 569,
                                "end": 574,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The login parameters.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 611,
                                "end": 617,
                                "flags": 0,
                                "escapedText": "return"
                            },
                            "comment": "<p>The user credentials.</p>\n"
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 41,
                    "description": "<p>Logs out the user and clear credentials.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 984,
                                "end": 990,
                                "flags": 0,
                                "escapedText": "return"
                            },
                            "comment": "<p>True if the user was logged out successfully.</p>\n"
                        }
                    ]
                }
            ],
            "description": "<p>Provides a base for authentication workflow.\nThe login/logout methods should be replaced with proper implementation.</p>\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { Credentials, CredentialsService } from './credentials.service';\n\nexport interface LoginContext {\n  username: string;\n  password: string;\n  remember?: boolean;\n}\n\n/**\n * Provides a base for authentication workflow.\n * The login/logout methods should be replaced with proper implementation.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthenticationService {\n  constructor(private credentialsService: CredentialsService) {}\n\n  /**\n   * Authenticates the user.\n   * @param context The login parameters.\n   * @return The user credentials.\n   */\n  login(context: LoginContext): Observable<Credentials> {\n    // Replace by proper authentication call\n    const data = {\n      username: context.username,\n      token: '123456',\n    };\n    this.credentialsService.setCredentials(data, context.remember);\n    return of(data);\n  }\n\n  /**\n   * Logs out the user and clear credentials.\n   * @return True if the user was logged out successfully.\n   */\n  logout(): Observable<boolean> {\n    // Customize credentials invalidation here\n    this.credentialsService.setCredentials();\n    return of(true);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "credentialsService",
                        "type": "CredentialsService"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "credentialsService",
                        "type": "CredentialsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CredentialsService",
            "id": "injectable-CredentialsService-6ce7bd431bf8d8c49a82d9d9babaa936",
            "file": "src/app/auth/credentials.service.ts",
            "properties": [
                {
                    "name": "_credentials",
                    "defaultValue": "null",
                    "type": "Credentials | null",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "isAuthenticated",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 32,
                    "description": "<p>Checks is the user is authenticated.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 733,
                                "end": 739,
                                "flags": 0,
                                "escapedText": "return"
                            },
                            "comment": "<p>True if the user is authenticated.</p>\n"
                        }
                    ]
                },
                {
                    "name": "setCredentials",
                    "args": [
                        {
                            "name": "credentials",
                            "type": "Credentials",
                            "optional": true
                        },
                        {
                            "name": "remember",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "description": "<p>Sets the user credentials.\nThe credentials may be persisted across sessions by setting the <code>remember</code> parameter to true.\nOtherwise, the credentials are only persisted for the current session.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1270,
                                "end": 1281,
                                "flags": 0,
                                "escapedText": "credentials"
                            },
                            "type": "Credentials",
                            "optional": true,
                            "tagName": {
                                "pos": 1264,
                                "end": 1269,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The user credentials.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1316,
                                "end": 1324,
                                "flags": 0,
                                "escapedText": "remember"
                            },
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "pos": 1310,
                                "end": 1315,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>True to remember credentials across sessions.</p>\n"
                        }
                    ]
                }
            ],
            "description": "<p>Provides storage for authentication credentials.\nThe Credentials interface should be replaced with proper implementation.</p>\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nexport interface Credentials {\n  // Customize received credentials here\n  username: string;\n  token: string;\n}\n\nconst credentialsKey = 'credentials';\n\n/**\n * Provides storage for authentication credentials.\n * The Credentials interface should be replaced with proper implementation.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CredentialsService {\n  private _credentials: Credentials | null = null;\n\n  constructor() {\n    const savedCredentials = sessionStorage.getItem(credentialsKey) || localStorage.getItem(credentialsKey);\n    if (savedCredentials) {\n      this._credentials = JSON.parse(savedCredentials);\n    }\n  }\n\n  /**\n   * Checks is the user is authenticated.\n   * @return True if the user is authenticated.\n   */\n  isAuthenticated(): boolean {\n    return !!this.credentials;\n  }\n\n  /**\n   * Gets the user credentials.\n   * @return The user credentials or null if the user is not authenticated.\n   */\n  get credentials(): Credentials | null {\n    return this._credentials;\n  }\n\n  /**\n   * Sets the user credentials.\n   * The credentials may be persisted across sessions by setting the `remember` parameter to true.\n   * Otherwise, the credentials are only persisted for the current session.\n   * @param credentials The user credentials.\n   * @param remember True to remember credentials across sessions.\n   */\n  setCredentials(credentials?: Credentials, remember?: boolean) {\n    this._credentials = credentials || null;\n\n    if (credentials) {\n      const storage = remember ? localStorage : sessionStorage;\n      storage.setItem(credentialsKey, JSON.stringify(credentials));\n    } else {\n      sessionStorage.removeItem(credentialsKey);\n      localStorage.removeItem(credentialsKey);\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 19
            },
            "accessors": {
                "credentials": {
                    "name": "credentials",
                    "getSignature": {
                        "name": "credentials",
                        "type": "",
                        "returnType": "Credentials | null",
                        "line": 40,
                        "description": "<p>Gets the user credentials.</p>\n",
                        "jsdoctags": [
                            {
                                "pos": 891,
                                "end": 899,
                                "flags": 0,
                                "kind": 293,
                                "atToken": {
                                    "pos": 891,
                                    "end": 892,
                                    "flags": 0,
                                    "kind": 57
                                },
                                "tagName": {
                                    "pos": 892,
                                    "end": 898,
                                    "flags": 0,
                                    "escapedText": "return"
                                },
                                "comment": "<p>The user credentials or null if the user is not authenticated.</p>\n"
                            }
                        ]
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "I18nService",
            "id": "injectable-I18nService-e7242f5e6d96f1b2742ea02ecfa4f2bc",
            "file": "src/app/i18n/i18n.service.ts",
            "properties": [
                {
                    "name": "defaultLanguage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "langChangeSubscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "supportedLanguages",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methods": [
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "description": "<p>Cleans up language change subscription.</p>\n"
                },
                {
                    "name": "init",
                    "args": [
                        {
                            "name": "defaultLanguage",
                            "type": "string"
                        },
                        {
                            "name": "supportedLanguages",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "description": "<p>Initializes i18n for the application.\nLoads language from local storage if present, or sets default language.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 810,
                                "end": 825,
                                "flags": 0,
                                "escapedText": "defaultLanguage"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 804,
                                "end": 809,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The default language to use.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 867,
                                "end": 885,
                                "flags": 0,
                                "escapedText": "supportedLanguages"
                            },
                            "type": "string[]",
                            "tagName": {
                                "pos": 861,
                                "end": 866,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The list of supported languages.</p>\n"
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { TranslateService, LangChangeEvent } from '@ngx-translate/core';\nimport { Subscription } from 'rxjs';\n\nimport { Logger } from '@core/logger.service';\nimport enUS from '../../translations/en-US.json';\n\nconst log = new Logger('I18nService');\nconst languageKey = 'language';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class I18nService {\n  defaultLanguage!: string;\n  supportedLanguages!: string[];\n\n  private langChangeSubscription!: Subscription;\n\n  constructor(private translateService: TranslateService) {\n    // Embed languages to avoid extra HTTP requests\n    translateService.setTranslation('en-US', enUS);\n  }\n\n  /**\n   * Initializes i18n for the application.\n   * Loads language from local storage if present, or sets default language.\n   * @param defaultLanguage The default language to use.\n   * @param supportedLanguages The list of supported languages.\n   */\n  init(defaultLanguage: string, supportedLanguages: string[]) {\n    this.defaultLanguage = defaultLanguage;\n    this.supportedLanguages = supportedLanguages;\n    this.language = '';\n\n    // Warning: this subscription will always be alive for the app's lifetime\n    this.langChangeSubscription = this.translateService.onLangChange.subscribe((event: LangChangeEvent) => {\n      localStorage.setItem(languageKey, event.lang);\n    });\n  }\n\n  /**\n   * Cleans up language change subscription.\n   */\n  destroy() {\n    if (this.langChangeSubscription) {\n      this.langChangeSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Sets the current language.\n   * Note: The current language is saved to the local storage.\n   * If no parameter is specified, the language is loaded from local storage (if present).\n   * @param language The IETF language code to set.\n   */\n  set language(language: string) {\n    language = language || localStorage.getItem(languageKey) || this.translateService.getBrowserCultureLang();\n    let isSupportedLanguage = this.supportedLanguages.includes(language);\n\n    // If no exact match is found, search without the region\n    if (language && !isSupportedLanguage) {\n      language = language.split('-')[0];\n      language = this.supportedLanguages.find((supportedLanguage) => supportedLanguage.startsWith(language)) || '';\n      isSupportedLanguage = Boolean(language);\n    }\n\n    // Fallback if language is not supported\n    if (!isSupportedLanguage) {\n      language = this.defaultLanguage;\n    }\n\n    log.debug(`Language set to ${language}`);\n    this.translateService.use(language);\n  }\n\n  /**\n   * Gets the current language.\n   * @return The current language code.\n   */\n  get language(): string {\n    return this.translateService.currentLang;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translateService",
                        "type": "TranslateService"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "language": {
                    "name": "language",
                    "setSignature": {
                        "name": "language",
                        "type": "void",
                        "args": [
                            {
                                "name": "language",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 57,
                        "description": "<p>Sets the current language.\nNote: The current language is saved to the local storage.\nIf no parameter is specified, the language is loaded from local storage (if present).</p>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 1735,
                                    "end": 1743,
                                    "flags": 0,
                                    "escapedText": "language"
                                },
                                "type": "string",
                                "tagName": {
                                    "pos": 1729,
                                    "end": 1734,
                                    "flags": 0,
                                    "escapedText": "param"
                                },
                                "comment": "<p>The IETF language code to set.</p>\n"
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "language",
                        "type": "string",
                        "returnType": "string",
                        "line": 81,
                        "description": "<p>Gets the current language.</p>\n",
                        "jsdoctags": [
                            {
                                "pos": 2576,
                                "end": 2584,
                                "flags": 0,
                                "kind": 293,
                                "atToken": {
                                    "pos": 2576,
                                    "end": 2577,
                                    "flags": 0,
                                    "kind": 57
                                },
                                "tagName": {
                                    "pos": 2577,
                                    "end": 2583,
                                    "flags": 0,
                                    "escapedText": "return"
                                },
                                "comment": "<p>The current language code.</p>\n"
                            }
                        ]
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "QuoteService",
            "id": "injectable-QuoteService-1fd4f72eb91ba58d772d2f98776f06d0",
            "file": "src/app/home/quote.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getRandomQuote",
                    "args": [
                        {
                            "name": "context",
                            "type": "RandomQuoteContext"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "context",
                            "type": "RandomQuoteContext",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nconst routes = {\n  quote: (c: RandomQuoteContext) => `/jokes/random?category=${c.category}`,\n};\n\nexport interface RandomQuoteContext {\n  // The quote's category: 'dev', 'explicit'...\n  category: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QuoteService {\n  constructor(private httpClient: HttpClient) {}\n\n  getRandomQuote(context: RandomQuoteContext): Observable<string> {\n    return this.httpClient.get(routes.quote(context)).pipe(\n      map((body: any) => body.value),\n      catchError(() => of('Error, could not load joke :-('))\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RouteReusableStrategy",
            "id": "injectable-RouteReusableStrategy-3a45aff0ad87ab4df16cfdff1e233a5b",
            "file": "src/app/@core/route-reusable-strategy.ts",
            "properties": [],
            "methods": [
                {
                    "name": "retrieve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot"
                        }
                    ],
                    "optional": false,
                    "returnType": "DetachedRouteHandle | null",
                    "typeParameters": [],
                    "line": 21,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldAttach",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 17,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldDetach",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 11,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldReuseRoute",
                    "args": [
                        {
                            "name": "future",
                            "type": "ActivatedRouteSnapshot"
                        },
                        {
                            "name": "curr",
                            "type": "ActivatedRouteSnapshot"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 25,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "future",
                            "type": "ActivatedRouteSnapshot",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "curr",
                            "type": "ActivatedRouteSnapshot",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "store",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot"
                        },
                        {
                            "name": "detachedTree",
                            "type": "DetachedRouteHandle | null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "detachedTree",
                            "type": "DetachedRouteHandle | null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "<p>A route strategy allowing for explicit route reuse.\nUsed as a workaround for <a href=\"https://github.com/angular/angular/issues/18374\">https://github.com/angular/angular/issues/18374</a>\nTo reuse a given route, add <code>data: { reuse: true }</code> to the route definition.</p>\n",
            "sourceCode": "import { ActivatedRouteSnapshot, DetachedRouteHandle, RouteReuseStrategy } from '@angular/router';\nimport { Injectable } from '@angular/core';\n\n/**\n * A route strategy allowing for explicit route reuse.\n * Used as a workaround for https://github.com/angular/angular/issues/18374\n * To reuse a given route, add `data: { reuse: true }` to the route definition.\n */\n@Injectable()\nexport class RouteReusableStrategy extends RouteReuseStrategy {\n  public shouldDetach(route: ActivatedRouteSnapshot): boolean {\n    return false;\n  }\n\n  public store(route: ActivatedRouteSnapshot, detachedTree: DetachedRouteHandle | null): void {}\n\n  public shouldAttach(route: ActivatedRouteSnapshot): boolean {\n    return false;\n  }\n\n  public retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle | null {\n    return null;\n  }\n\n  public shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean {\n    // Reuse the route if the RouteConfig is the same, or if both routes use the\n    // same component, because the latter can have different RouteConfigs.\n    return (\n      future.routeConfig === curr.routeConfig ||\n      Boolean(future.routeConfig?.component && future.routeConfig?.component === curr.routeConfig?.component)\n    );\n  }\n}\n",
            "extends": "RouteReuseStrategy",
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppSharedPage",
            "id": "class-AppSharedPage-edb3d6ff156f7997884f4d87815cdd32",
            "file": "e2e/src/page-objects/app-shared.po.ts",
            "type": "class",
            "sourceCode": "import { browser, element, by } from 'protractor';\n\nexport class AppSharedPage {\n  async navigateAndSetLanguage() {\n    // Forces default language\n    await this.navigateTo();\n    await browser.executeScript(() => localStorage.setItem('language', 'en-US'));\n  }\n\n  async navigateTo() {\n    await browser.get('/');\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "navigateAndSetLanguage",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Logger",
            "id": "class-Logger-e0f5780747f75bad8fca085b6290d3f5",
            "file": "src/app/@core/logger.service.ts",
            "type": "class",
            "sourceCode": "export enum LogLevel {\n  Off = 0,\n  Error,\n  Warning,\n  Info,\n  Debug,\n}\n\n/**\n * Log output handler function.\n */\nexport type LogOutput = (source: string | undefined, level: LogLevel, ...objects: any[]) => void;\n\nexport class Logger {\n  /**\n   * Current logging level.\n   * Set it to LogLevel.Off to disable logs completely.\n   */\n  static level = LogLevel.Debug;\n\n  /**\n   * Additional log outputs.\n   */\n  static outputs: LogOutput[] = [];\n\n  /**\n   * Enables production mode.\n   * Sets logging level to LogLevel.Warning.\n   */\n  static enableProductionMode() {\n    Logger.level = LogLevel.Warning;\n  }\n\n  constructor(private source?: string) {}\n\n  /**\n   * Logs messages or objects  with the debug level.\n   * Works the same as console.log().\n   */\n  debug(...objects: any[]) {\n    this.log(console.log, LogLevel.Debug, objects);\n  }\n\n  /**\n   * Logs messages or objects  with the info level.\n   * Works the same as console.log().\n   */\n  info(...objects: any[]) {\n    this.log(console.info, LogLevel.Info, objects);\n  }\n\n  /**\n   * Logs messages or objects  with the warning level.\n   * Works the same as console.log().\n   */\n  warn(...objects: any[]) {\n    this.log(console.warn, LogLevel.Warning, objects);\n  }\n\n  /**\n   * Logs messages or objects  with the error level.\n   * Works the same as console.log().\n   */\n  error(...objects: any[]) {\n    this.log(console.error, LogLevel.Error, objects);\n  }\n\n  private log(func: (...args: any[]) => void, level: LogLevel, objects: any[]) {\n    if (level <= Logger.level) {\n      const log = this.source ? ['[' + this.source + ']'].concat(objects) : objects;\n      func.apply(console, log);\n      Logger.outputs.forEach((output) => output.apply(output, [this.source, level, ...objects]));\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "source",
                        "type": "string",
                        "optional": true
                    }
                ],
                "line": 68,
                "jsdoctags": [
                    {
                        "name": "source",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "level",
                    "defaultValue": "LogLevel.Debug",
                    "type": "",
                    "optional": false,
                    "description": "<p>Current logging level.\nSet it to LogLevel.Off to disable logs completely.</p>\n",
                    "line": 55,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "outputs",
                    "defaultValue": "[]",
                    "type": "LogOutput[]",
                    "optional": false,
                    "description": "<p>Additional log outputs.</p>\n",
                    "line": 60,
                    "modifierKind": [
                        115
                    ]
                }
            ],
            "methods": [
                {
                    "name": "debug",
                    "args": [
                        {
                            "name": "objects",
                            "type": "any[]",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "description": "<p>Logs messages or objects  with the debug level.\nWorks the same as console.log().</p>\n",
                    "jsdoctags": [
                        {
                            "name": "objects",
                            "type": "any[]",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "enableProductionMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "description": "<p>Enables production mode.\nSets logging level to LogLevel.Warning.</p>\n",
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "error",
                    "args": [
                        {
                            "name": "objects",
                            "type": "any[]",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "description": "<p>Logs messages or objects  with the error level.\nWorks the same as console.log().</p>\n",
                    "jsdoctags": [
                        {
                            "name": "objects",
                            "type": "any[]",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "info",
                    "args": [
                        {
                            "name": "objects",
                            "type": "any[]",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "description": "<p>Logs messages or objects  with the info level.\nWorks the same as console.log().</p>\n",
                    "jsdoctags": [
                        {
                            "name": "objects",
                            "type": "any[]",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "func",
                            "type": "function",
                            "function": [
                                {
                                    "name": "args",
                                    "type": "any[]",
                                    "dotDotDotToken": true
                                }
                            ]
                        },
                        {
                            "name": "level",
                            "type": "LogLevel"
                        },
                        {
                            "name": "objects",
                            "type": "any[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "func",
                            "type": "function",
                            "function": [
                                {
                                    "name": "args",
                                    "type": "any[]",
                                    "dotDotDotToken": true
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "level",
                            "type": "LogLevel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "objects",
                            "type": "any[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "warn",
                    "args": [
                        {
                            "name": "objects",
                            "type": "any[]",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "description": "<p>Logs messages or objects  with the warning level.\nWorks the same as console.log().</p>\n",
                    "jsdoctags": [
                        {
                            "name": "objects",
                            "type": "any[]",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoginPage",
            "id": "class-LoginPage-406a8c1a60b40c0a8bdcd01f5eedb0ba",
            "file": "e2e/src/page-objects/login.po.ts",
            "type": "class",
            "sourceCode": "import { browser, element, by } from 'protractor';\n\nexport class LoginPage {\n  usernameField = element(by.css('input[formControlName=\"username\"]'));\n  passwordField = element(by.css('input[formControlName=\"password\"]'));\n  loginButton = element(by.css('button[type=\"submit\"]'));\n\n  async login() {\n    await this.usernameField.sendKeys('test');\n    await this.passwordField.sendKeys('123');\n    await this.loginButton.click();\n  }\n}\n",
            "properties": [
                {
                    "name": "loginButton",
                    "defaultValue": "element(by.css('button[type=\"submit\"]'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "passwordField",
                    "defaultValue": "element(by.css('input[formControlName=\"password\"]'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "usernameField",
                    "defaultValue": "element(by.css('input[formControlName=\"username\"]'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MockAuthenticationService",
            "id": "class-MockAuthenticationService-6eb03506fd3a14a550abb94aada324a8",
            "file": "src/app/auth/authentication.service.mock.ts",
            "type": "class",
            "sourceCode": "import { Observable, of } from 'rxjs';\n\nimport { LoginContext } from './authentication.service';\nimport { Credentials } from './credentials.service';\n\nexport class MockAuthenticationService {\n  credentials: Credentials | null = {\n    username: 'test',\n    token: '123',\n  };\n\n  login(context: LoginContext): Observable<Credentials> {\n    return of({\n      username: context.username,\n      token: '123456',\n    });\n  }\n\n  logout(): Observable<boolean> {\n    this.credentials = null;\n    return of(true);\n  }\n}\n",
            "properties": [
                {
                    "name": "credentials",
                    "defaultValue": "{\n    username: 'test',\n    token: '123',\n  }",
                    "type": "Credentials | null",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "context",
                            "type": "LoginContext"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Credentials>",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "context",
                            "type": "LoginContext",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MockCredentialsService",
            "id": "class-MockCredentialsService-e475e637538540d949c62a3c1ba25832",
            "file": "src/app/auth/credentials.service.mock.ts",
            "type": "class",
            "sourceCode": "import { Credentials } from './credentials.service';\n\nexport class MockCredentialsService {\n  credentials: Credentials | null = {\n    username: 'test',\n    token: '123',\n  };\n\n  isAuthenticated(): boolean {\n    return !!this.credentials;\n  }\n\n  setCredentials(credentials?: Credentials, _remember?: boolean) {\n    this.credentials = credentials || null;\n  }\n}\n",
            "properties": [
                {
                    "name": "credentials",
                    "defaultValue": "{\n    username: 'test',\n    token: '123',\n  }",
                    "type": "Credentials | null",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "isAuthenticated",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 9
                },
                {
                    "name": "setCredentials",
                    "args": [
                        {
                            "name": "credentials",
                            "type": "Credentials",
                            "optional": true
                        },
                        {
                            "name": "_remember",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "jsdoctags": [
                        {
                            "name": "credentials",
                            "type": "Credentials",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "_remember",
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Shell",
            "id": "class-Shell-5e925bc7cce5f1736eac2195a4239752",
            "file": "src/app/shell/shell.service.ts",
            "type": "class",
            "sourceCode": "import { Routes, Route } from '@angular/router';\n\nimport { AuthenticationGuard } from '@app/auth';\nimport { ShellComponent } from './shell.component';\n\n/**\n * Provides helper methods to create routes.\n */\nexport class Shell {\n  /**\n   * Creates routes using the shell component and authentication.\n   * @param routes The routes to add.\n   * @return The new route using shell as the base.\n   */\n  static childRoutes(routes: Routes): Route {\n    return {\n      path: '',\n      component: ShellComponent,\n      children: routes,\n      // canActivate: [AuthenticationGuard],\n    };\n  }\n}\n",
            "properties": [],
            "description": "<p>Provides helper methods to create routes.</p>\n",
            "rawdescription": "Provides helper methods to create routes.",
            "methods": [
                {
                    "name": "childRoutes",
                    "args": [
                        {
                            "name": "routes",
                            "type": "Routes"
                        }
                    ],
                    "optional": false,
                    "returnType": "Route",
                    "typeParameters": [],
                    "line": 15,
                    "description": "<p>Creates routes using the shell component and authentication.</p>\n",
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 310,
                                "end": 316,
                                "flags": 0,
                                "escapedText": "routes"
                            },
                            "type": "Routes",
                            "tagName": {
                                "pos": 304,
                                "end": 309,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The routes to add.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 342,
                                "end": 348,
                                "flags": 0,
                                "escapedText": "return"
                            },
                            "comment": "<p>The new route using shell as the base.</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ShellPage",
            "id": "class-ShellPage-9d30f79ef9c685b13c401a72b94bae54",
            "file": "e2e/src/page-objects/shell.po.ts",
            "type": "class",
            "sourceCode": "import { browser, element, by } from 'protractor';\n\nexport class ShellPage {\n  welcomeText = element(by.css('app-root mat-card-title'));\n\n  getParagraphText() {\n    return this.welcomeText.getText();\n  }\n}\n",
            "properties": [
                {
                    "name": "welcomeText",
                    "defaultValue": "element(by.css('app-root mat-card-title'))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "getParagraphText",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AboutComponent",
            "id": "component-AboutComponent-fa8e6ce70dc653b2e77ab82cbe722c3f",
            "file": "src/app/about/about.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-about",
            "styleUrls": [
                "./about.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./about.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "version",
                    "defaultValue": "environment.version",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\nimport { environment } from '@env/environment';\n\n@Component({\n  selector: 'app-about',\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.scss'],\n})\nexport class AboutComponent implements OnInit {\n  version: string | null = environment.version;\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\n  text-align: center;\n  padding: 1rem;\n}\n\n.mat-icon {\n  vertical-align: middle;\n}\n",
                    "styleUrl": "./about.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\n  <mat-card>\n    <h1>\n      <mat-card-title translate>APP_NAME</mat-card-title>\n    </h1>\n    <mat-card-content>\n      <mat-icon>code</mat-icon>\n      <span translate>Version</span> {{ version }}\n    </mat-card-content>\n  </mat-card>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-6bedfec03d6cbfa33617f49dba0c4a62",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, NavigationEnd, ActivatedRoute } from '@angular/router';\nimport { Title } from '@angular/platform-browser';\nimport { TranslateService } from '@ngx-translate/core';\nimport { merge } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\nimport { environment } from '@env/environment';\nimport { Logger, UntilDestroy, untilDestroyed } from '@core';\nimport { I18nService } from '@app/i18n';\n\nconst log = new Logger('App');\n\n@UntilDestroy()\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit, OnDestroy {\n  constructor(\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private titleService: Title,\n    private translateService: TranslateService,\n    private i18nService: I18nService\n  ) {}\n\n  ngOnInit() {\n    // Setup logger\n    if (environment.production) {\n      Logger.enableProductionMode();\n    }\n\n    log.debug('init');\n\n    // Setup translations\n    this.i18nService.init(environment.defaultLanguage, environment.supportedLanguages);\n\n    const onNavigationEnd = this.router.events.pipe(filter((event) => event instanceof NavigationEnd));\n\n    // Change page title on navigation or language change, based on route data\n    merge(this.translateService.onLangChange, onNavigationEnd)\n      .pipe(\n        map(() => {\n          let route = this.activatedRoute;\n          while (route.firstChild) {\n            route = route.firstChild;\n          }\n          return route;\n        }),\n        filter((route) => route.outlet === 'primary'),\n        switchMap((route) => route.data),\n        untilDestroyed(this)\n      )\n      .subscribe((event) => {\n        const title = event.title;\n        if (title) {\n          this.titleService.setTitle(this.translateService.instant(title));\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this.i18nService.destroy();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex: 1;\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "titleService",
                        "type": "Title"
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService"
                    },
                    {
                        "name": "i18nService",
                        "type": "I18nService"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "i18nService",
                        "type": "I18nService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<router-outlet></router-outlet>\n"
        },
        {
            "name": "ApplicationFormComponent",
            "id": "component-ApplicationFormComponent-c87f394a61d6090570df23be38d2a111",
            "file": "src/app/@shared/application-form/application-form.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-application-form",
            "styleUrls": [
                "./application-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./application-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "acknowledgementText",
                    "line": 119,
                    "type": "string"
                },
                {
                    "name": "address",
                    "line": 49,
                    "type": "string"
                },
                {
                    "name": "city",
                    "line": 54,
                    "type": "string"
                },
                {
                    "name": "date",
                    "line": 79,
                    "type": ""
                },
                {
                    "name": "email",
                    "line": 74,
                    "type": "string"
                },
                {
                    "name": "firstName",
                    "line": 39,
                    "type": "string"
                },
                {
                    "name": "initials",
                    "line": 125,
                    "type": "string"
                },
                {
                    "name": "lastName",
                    "line": 44,
                    "type": "string"
                },
                {
                    "name": "license",
                    "line": 99,
                    "type": "string"
                },
                {
                    "name": "make",
                    "line": 89,
                    "type": "string"
                },
                {
                    "name": "mileage",
                    "line": 104,
                    "type": "string"
                },
                {
                    "name": "model",
                    "line": 94,
                    "type": "string"
                },
                {
                    "name": "phone",
                    "line": 69,
                    "type": "string"
                },
                {
                    "name": "price",
                    "line": 114,
                    "type": "string"
                },
                {
                    "name": "readonly",
                    "line": 130,
                    "type": "boolean"
                },
                {
                    "name": "state",
                    "line": 59,
                    "type": "string"
                },
                {
                    "name": "vin",
                    "line": 109,
                    "type": "string"
                },
                {
                    "name": "year",
                    "line": 84,
                    "type": "string"
                },
                {
                    "name": "zipcode",
                    "line": 64,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "formSubmit",
                    "defaultValue": "new EventEmitter(null)",
                    "line": 145,
                    "type": "EventEmitter<Controls>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "acknowledgementTextStr",
                    "defaultValue": "\"I hereby authorize TNT Smog to perform a smog inspection/test. TNT Smog is authorized to operate the vehicle for inspection, testing, pick up & delivery at the vehicle owner's risk. TNT Smog will NOT be responsible for loss or damage to vehicle, or articles left in vehicle in case of fire, theft, accident or many other cause beyond our control. I understand TNT Smog does not do any repairs or adjustments and cannot diagnose or refer me to any special shop for repair. I also understand that I WILL HAVE TO PAY THE INSPECTION FEE WHETHER THE INSPECTION PASS OR NOT. The costs of performing inspections services has been explained to my satisfaction. If you agree, please enter your Initials, e.g. JD for John Doe.\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "controls",
                    "defaultValue": "{\n    firstName: [''],\n    lastName: [''],\n    address: [''],\n    city: [''],\n    state: [''],\n    zipcode: [''],\n    phone: [''],\n    email: [''],\n    date: [''],\n    year: [''],\n    make: [''],\n    model: [''],\n    license: [''],\n    mileage: [''],\n    vin: [''],\n    price: [''],\n    initials: [''],\n    acknowledgementText: [this.acknowledgementTextStr]\n  }",
                    "type": "Controls",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "formGroup",
                    "defaultValue": "this.fb.group(this.controls)",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "isReadonly",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150
                },
                {
                    "name": "submitForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { FormBuilder, FormGroup } from '@angular/forms';\nimport { ChangeDetectionStrategy, Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\nimport { Controls, ControlName } from './application-form.model';\n\n@Component({\n  selector: 'app-application-form',\n  templateUrl: './application-form.component.html',\n  styleUrls: ['./application-form.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ApplicationFormComponent implements OnInit {\n  acknowledgementTextStr = \"I hereby authorize TNT Smog to perform a smog inspection/test. TNT Smog is authorized to operate the vehicle for inspection, testing, pick up & delivery at the vehicle owner's risk. TNT Smog will NOT be responsible for loss or damage to vehicle, or articles left in vehicle in case of fire, theft, accident or many other cause beyond our control. I understand TNT Smog does not do any repairs or adjustments and cannot diagnose or refer me to any special shop for repair. I also understand that I WILL HAVE TO PAY THE INSPECTION FEE WHETHER THE INSPECTION PASS OR NOT. The costs of performing inspections services has been explained to my satisfaction. If you agree, please enter your Initials, e.g. JD for John Doe.\"\n\n  private controls: Controls = {\n    firstName: [''],\n    lastName: [''],\n    address: [''],\n    city: [''],\n    state: [''],\n    zipcode: [''],\n    phone: [''],\n    email: [''],\n    date: [''],\n    year: [''],\n    make: [''],\n    model: [''],\n    license: [''],\n    mileage: [''],\n    vin: [''],\n    price: [''],\n    initials: [''],\n    acknowledgementText: [this.acknowledgementTextStr]\n  }\n  \n  formGroup: FormGroup = this.fb.group(this.controls);\n  isReadonly: boolean = false;\n\n  @Input()\n  set firstName(val: string) {\n    this.formGroup.get(ControlName.firstName).setValue(val);\n  }\n\n  @Input()\n  set lastName(val: string) {\n    this.formGroup.get(ControlName.lastName).setValue(val);\n  }\n\n  @Input()\n  set address(val: string) {\n    this.formGroup.get(ControlName.address).setValue(val);\n  }\n\n  @Input()\n  set city(val: string) {\n    this.formGroup.get(ControlName.city).setValue(val);\n  }\n\n  @Input()\n  set state(val: string) {\n    this.formGroup.get(ControlName.state).setValue(val);\n  }\n\n  @Input()\n  set zipcode(val: string) {\n    this.formGroup.get(ControlName.zipcode).setValue(val);\n  }\n\n  @Input()\n  set phone(val: string) {\n    this.formGroup.get(ControlName.phone).setValue(val);\n  }\n\n  @Input()\n  set email(val: string) {\n    this.formGroup.get(ControlName.email).setValue(val);\n  }\n\n  @Input()\n  set date(val: Date) {\n    this.formGroup.get(ControlName.date).setValue(val);\n  }\n\n  @Input()\n  set year(val: string) {\n    this.formGroup.get(ControlName.year).setValue(val);\n  }\n\n  @Input()\n  set make(val: string) {\n    this.formGroup.get(ControlName.make).setValue(val);\n  }\n\n  @Input()\n  set model(val: string) {\n    this.formGroup.get(ControlName.model).setValue(val);\n  }\n\n  @Input()\n  set license(val: string) {\n    this.formGroup.get(ControlName.license).setValue(val);\n  }\n\n  @Input()\n  set mileage(val: string) {\n    this.formGroup.get(ControlName.mileage).setValue(val);\n  }\n\n  @Input()\n  set vin(val: string) {\n    this.formGroup.get(ControlName.vin).setValue(val);\n  }\n\n  @Input()\n  set price(val: string) {\n    this.formGroup.get(ControlName.price).setValue(val);\n  }\n\n  @Input()\n  set acknowledgementText(val: string) {\n    this.acknowledgementTextStr = (val) ? val : this.acknowledgementTextStr;\n    this.formGroup.get(ControlName.acknowledgementText).setValue(this.acknowledgementTextStr);\n  }\n\n  @Input()\n  set initials(val: string) {\n    this.formGroup.get(ControlName.initials).setValue(val);\n  }\n\n  @Input()\n  set readonly(val: boolean) {\n    if(!!val) {\n      for( const control of Object.values(this.formGroup.controls) ) {\n        control.disable();\n      }\n    }\n\n    this.isReadonly = val;\n  }\n\n  // @Input() \n  // set errors() {\n  // }\n\n  @Output()\n  formSubmit: EventEmitter<Controls> = new EventEmitter(null)\n\n  constructor(private fb: FormBuilder) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  submitForm() {\n    if(this.formGroup.valid) {\n      this.formSubmit.emit(this.formGroup.value)\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@media only screen and (max-width: 600px) {\n    .form mat-form-field {\n        width: 100%;\n    }\n  }",
                    "styleUrl": "./application-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    }
                ],
                "line": 145,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "firstName": {
                    "name": "firstName",
                    "setSignature": {
                        "name": "firstName",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 39,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "lastName": {
                    "name": "lastName",
                    "setSignature": {
                        "name": "lastName",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 44,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "address": {
                    "name": "address",
                    "setSignature": {
                        "name": "address",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 49,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "city": {
                    "name": "city",
                    "setSignature": {
                        "name": "city",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 54,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "state": {
                    "name": "state",
                    "setSignature": {
                        "name": "state",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 59,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "zipcode": {
                    "name": "zipcode",
                    "setSignature": {
                        "name": "zipcode",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 64,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "phone": {
                    "name": "phone",
                    "setSignature": {
                        "name": "phone",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 69,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "email": {
                    "name": "email",
                    "setSignature": {
                        "name": "email",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 74,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "date": {
                    "name": "date",
                    "setSignature": {
                        "name": "date",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 79,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "year": {
                    "name": "year",
                    "setSignature": {
                        "name": "year",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 84,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "make": {
                    "name": "make",
                    "setSignature": {
                        "name": "make",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 89,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "model": {
                    "name": "model",
                    "setSignature": {
                        "name": "model",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 94,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "license": {
                    "name": "license",
                    "setSignature": {
                        "name": "license",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 99,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "mileage": {
                    "name": "mileage",
                    "setSignature": {
                        "name": "mileage",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 104,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "vin": {
                    "name": "vin",
                    "setSignature": {
                        "name": "vin",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 109,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "price": {
                    "name": "price",
                    "setSignature": {
                        "name": "price",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 114,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "acknowledgementText": {
                    "name": "acknowledgementText",
                    "setSignature": {
                        "name": "acknowledgementText",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 119,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "initials": {
                    "name": "initials",
                    "setSignature": {
                        "name": "initials",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 125,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "readonly": {
                    "name": "readonly",
                    "setSignature": {
                        "name": "readonly",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 130,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<form [formGroup]=\"formGroup\" (ngSubmit)=\"submitForm()\" class=\"form\">\n    <h2>Customer Information</h2>\n    <mat-form-field appearance=\"outline\">\n        <mat-label>First Name</mat-label>\n        <input matInput placeholder=\"e.g. John\" formControlName=\"firstName\" required>\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Last Name</mat-label>\n        <input matInput placeholder=\"e.g. Doe\" formControlName=\"lastName\" required>\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Address</mat-label>\n        <input matInput placeholder=\"e.g. 123 Main st.\" formControlName=\"address\" required>\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n        <mat-label>City</mat-label>\n        <input matInput placeholder=\"e.g. San Jose\" formControlName=\"city\" required>\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n        <mat-label>State</mat-label>\n        <input matInput placeholder=\"e.g. CA\" formControlName=\"state\" required>\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Zipcode</mat-label>\n        <input matInput type=\"number\" placeholder=\"e.g. 95123\" formControlName=\"zipcode\" required>\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Choose a date</mat-label>\n        <input matInput [matDatepicker]=\"picker\" formControlName=\"date\" required> \n        <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n        <mat-datepicker #picker></mat-datepicker>\n    </mat-form-field>\n\n    <h2>Contacts Information</h2>\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Phone</mat-label>\n        <input matInput type=\"number\" placeholder=\"e.g. 408-123-4231\" formControlName=\"phone\" required>\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Email</mat-label>\n        <input type=\"email\" matInput placeholder=\"e.g. john.doe@gmail.com\" formControlName=\"email\">\n    </mat-form-field>\n    <label id=\"example-radio-group-label\">Preferred method of text message. (We will send you information like smog results via this method)</label>\n    <mat-radio-group name=\"contact-preference\">\n        <mat-radio-button value=\"chocolate\" checked=\"true\">Chocolate</mat-radio-button>\n        <mat-radio-button value=\"vanilla\">Vanilla</mat-radio-button>\n        <mat-radio-button value=\"strawberry\">Strawberry</mat-radio-button>\n    </mat-radio-group>\n    \n\n    <h2>Vehicle Information</h2>\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Year</mat-label>\n        <input type=\"number\" matInput placeholder=\"e.g. 2000\" formControlName=\"year\" required>\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Make</mat-label>\n        <input type=\"text\" matInput placeholder=\"e.g. Toyota\" formControlName=\"make\" required>\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Model</mat-label>\n        <input type=\"text\" matInput placeholder=\"e.g. Prius\" formControlName=\"model\" required>\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n        <mat-label>License</mat-label>\n        <input type=\"text\" matInput placeholder=\"e.g. 5ABC123\" formControlName=\"license\" required>\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Mileage</mat-label>\n        <input type=\"number\" matInput placeholder=\"e.g. 123456\" formControlName=\"mileage\" required>\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n        <mat-label>VIN Number</mat-label>\n        <input type=\"text\" matInput placeholder=\"e.g. 6abcd1236scs\" formControlName=\"vin\" required>\n    </mat-form-field>\n\n    <h2>Pricing & Confirmation</h2>\n    <h4>\n        Estimated price agreed with technician.\n    </h4>\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Estimated Price in USD</mat-label>\n        <input type=\"number\" matInput placeholder=\"e.g. 50.00\" formControlName=\"price\" required>\n    </mat-form-field>\n    <h4>\n        {{acknowledgementTextStr}}\n    </h4>\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Initials</mat-label>\n        <input type=\"text\" matInput placeholder=\"e.g. JD\" formControlName=\"initials\" required>\n    </mat-form-field>\n    <br/>\n    <button *ngIf=\"!isReadonly\" mat-raised-button color=\"primary\" type=\"submit\" >Submit</button>\n</form>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-4854572203e7baa88ad8ce1287cc686b",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\" fill=\"#FFF\" />\n            <path d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\" fill=\"#555AB9\" />\n            <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button *ngIf=\"!user\" size=\"small\" (onClick)=\"onLogin.emit($event)\" label=\"Log in\"></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 39,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 48,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 42,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 45,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\" fill=\"#FFF\" />\n            <path d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\" fill=\"#555AB9\" />\n            <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button *ngIf=\"!user\" size=\"small\" (onClick)=\"onLogin.emit($event)\" label=\"Log in\"></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-5cd80c5fa14e2eb0b617af08e325c94a-1",
            "file": "src/app/shell/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "sidenav",
                    "line": 14,
                    "type": "MatSidenav"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Title } from '@angular/platform-browser';\nimport { Component, OnInit, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { MatSidenav } from '@angular/material/sidenav';\n\nimport { AuthenticationService, CredentialsService } from '@app/auth';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss'],\n})\nexport class HeaderComponent implements OnInit {\n  @Input() sidenav!: MatSidenav;\n\n  constructor(\n    private router: Router,\n    private titleService: Title,\n    private authenticationService: AuthenticationService,\n    private credentialsService: CredentialsService\n  ) {}\n\n  ngOnInit() {}\n\n  logout() {\n    this.authenticationService.logout().subscribe(() => this.router.navigate(['/login'], { replaceUrl: true }));\n  }\n\n  get username(): string | null {\n    const credentials = this.credentialsService.credentials;\n    return credentials ? credentials.username : null;\n  }\n\n  get title(): string {\n    return this.titleService.getTitle();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/theme/theme-variables\";\n\n.navbar {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  z-index: 1;\n}\n\n.brand {\n  color: mat-color($app-primary, \"default-contrast\");\n  text-decoration: none;\n  padding-right: 1rem;\n}\n\n.menu-button {\n  margin-right: 1rem;\n}\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "titleService",
                        "type": "Title"
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService"
                    },
                    {
                        "name": "credentialsService",
                        "type": "CredentialsService"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "credentialsService",
                        "type": "CredentialsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "username": {
                    "name": "username",
                    "getSignature": {
                        "name": "username",
                        "type": "",
                        "returnType": "string | null",
                        "line": 29
                    }
                },
                "title": {
                    "name": "title",
                    "getSignature": {
                        "name": "title",
                        "type": "string",
                        "returnType": "string",
                        "line": 34
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<mat-toolbar class=\"mat-elevation-z6 navbar\" color=\"primary\">\n  <div fxHide.gt-sm fxLayoutAlign=\"start center\">\n    <button class=\"menu-button\" mat-icon-button (click)=\"sidenav.toggle()\">\n      <mat-icon>menu</mat-icon>\n    </button>\n    <span class=\"title\">{{ title }}</span>\n  </div>\n  <div fxHide.lt-md>\n    <a class=\"brand\" href=\"https://github.com/ngx-rocket\" translate>APP_NAME</a>\n    <button mat-button routerLink=\"/home\" routerLinkActive=\"active\">\n      <mat-icon>home</mat-icon>\n      <span translate>Home</span>\n    </button>\n    <button mat-button routerLink=\"/about\" routerLinkActive=\"active\">\n      <mat-icon>info</mat-icon>\n      <span translate>About</span>\n    </button>\n  </div>\n  <span fxFlex></span>\n  <app-language-selector icon=\"true\"></app-language-selector>\n  <button mat-icon-button [matMenuTriggerFor]=\"userMenu\">\n    <mat-icon>person</mat-icon>\n  </button>\n  <mat-menu #userMenu=\"matMenu\">\n    <mat-list>\n      <mat-list-item>\n        <span translate>Logged in as</span>&nbsp;<b>{{ username }}</b>\n      </mat-list-item>\n      <mat-divider></mat-divider>\n    </mat-list>\n    <button mat-menu-item (click)=\"logout()\" translate>Logout</button>\n  </mat-menu>\n</mat-toolbar>\n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-1ff56eade2d862a6e366768637a01241",
            "file": "src/app/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "quote",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { finalize } from 'rxjs/operators';\n\nimport { QuoteService } from './quote.service';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss'],\n})\nexport class HomeComponent implements OnInit {\n  quote: string | undefined;\n  isLoading = false;\n\n  constructor(private quoteService: QuoteService) {}\n\n  ngOnInit() {\n    this.isLoading = true;\n    this.quoteService\n      .getRandomQuote({ category: 'dev' })\n      .pipe(\n        finalize(() => {\n          this.isLoading = false;\n        })\n      )\n      .subscribe((quote: string) => {\n        this.quote = quote;\n      });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\n  text-align: center;\n  padding: 1rem;\n}\n",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "quoteService",
                        "type": "QuoteService"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "quoteService",
                        "type": "QuoteService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\n  <!-- <mat-card>\n    <p>\n      <img class=\"logo\" src=\"assets/ngx-rocket-logo.png\" alt=\"angular logo\" />\n    </p>\n    <mat-card-content>\n      <mat-card-title translate>Hello world !</mat-card-title>\n      <mat-card-subtitle>\n        <app-loader [isLoading]=\"isLoading\" size=\"1.5\"></app-loader>\n        <q [hidden]=\"isLoading\">{{ quote }}</q>\n      </mat-card-subtitle>\n    </mat-card-content>\n  </mat-card> -->\n</div>\n"
        },
        {
            "name": "LanguageSelectorComponent",
            "id": "component-LanguageSelectorComponent-a176a6dca440fbff831af6b787b70ca8",
            "file": "src/app/i18n/language-selector.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-language-selector",
            "styleUrls": [
                "./language-selector.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./language-selector.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "defaultValue": "false",
                    "line": 11
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                },
                {
                    "name": "setLanguage",
                    "args": [
                        {
                            "name": "language",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "language",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\n\nimport { I18nService } from './i18n.service';\n\n@Component({\n  selector: 'app-language-selector',\n  templateUrl: './language-selector.component.html',\n  styleUrls: ['./language-selector.component.scss'],\n})\nexport class LanguageSelectorComponent implements OnInit {\n  @Input() icon = false;\n\n  constructor(private i18nService: I18nService) {}\n\n  ngOnInit() {}\n\n  setLanguage(language: string) {\n    this.i18nService.language = language;\n  }\n\n  get currentLanguage(): string {\n    return this.i18nService.language;\n  }\n\n  get languages(): string[] {\n    return this.i18nService.supportedLanguages;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./language-selector.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "i18nService",
                        "type": "I18nService"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "i18nService",
                        "type": "I18nService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "currentLanguage": {
                    "name": "currentLanguage",
                    "getSignature": {
                        "name": "currentLanguage",
                        "type": "string",
                        "returnType": "string",
                        "line": 21
                    }
                },
                "languages": {
                    "name": "languages",
                    "getSignature": {
                        "name": "languages",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 25
                    }
                }
            },
            "templateData": "<button *ngIf=\"icon; else text\" mat-icon-button [matMenuTriggerFor]=\"languageMenu\">\n  <mat-icon>language</mat-icon>\n</button>\n<ng-template #text>\n  <button mat-raised-button color=\"primary\" [matMenuTriggerFor]=\"languageMenu\">\n    {{ currentLanguage }}\n  </button>\n</ng-template>\n<mat-menu #languageMenu=\"matMenu\">\n  <button mat-menu-item *ngFor=\"let language of languages\" (click)=\"setLanguage(language)\">\n    {{ language }}\n  </button>\n</mat-menu>\n"
        },
        {
            "name": "LoaderComponent",
            "id": "component-LoaderComponent-d37c3e716017dda97ee7709aab815dac",
            "file": "src/app/@shared/loader/loader.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-loader",
            "styleUrls": [
                "./loader.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./loader.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "line": 9
                },
                {
                    "name": "message",
                    "line": 11,
                    "type": "string | undefined"
                },
                {
                    "name": "size",
                    "defaultValue": "1",
                    "line": 10
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-loader',\n  templateUrl: './loader.component.html',\n  styleUrls: ['./loader.component.scss'],\n})\nexport class LoaderComponent implements OnInit {\n  @Input() isLoading = false;\n  @Input() size = 1;\n  @Input() message: string | undefined;\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-progress-spinner {\n  display: inline-block;\n  vertical-align: middle;\n}\n\n.message {\n  margin-left: 0.5em;\n}\n",
                    "styleUrl": "./loader.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [hidden]=\"!isLoading\">\n  <mat-progress-spinner mode=\"indeterminate\" [strokeWidth]=\"2\" [diameter]=\"32 * size\"></mat-progress-spinner>\n  <span class=\"message\">{{ message }}</span>\n</div>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-a89618df454676f1eb48682b61752bf1",
            "file": "src/app/auth/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "propertiesClass": [
                {
                    "name": "error",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "loginForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "version",
                    "defaultValue": "environment.version",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "createForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { finalize } from 'rxjs/operators';\n\nimport { environment } from '@env/environment';\nimport { Logger, UntilDestroy, untilDestroyed } from '@core';\nimport { AuthenticationService } from './authentication.service';\n\nconst log = new Logger('Login');\n\n@UntilDestroy()\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnInit {\n  version: string | null = environment.version;\n  error: string | undefined;\n  loginForm!: FormGroup;\n  isLoading = false;\n\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute,\n    private formBuilder: FormBuilder,\n    private authenticationService: AuthenticationService\n  ) {\n    this.createForm();\n  }\n\n  ngOnInit() {}\n\n  login() {\n    this.isLoading = true;\n    const login$ = this.authenticationService.login(this.loginForm.value);\n    login$\n      .pipe(\n        finalize(() => {\n          this.loginForm.markAsPristine();\n          this.isLoading = false;\n        }),\n        untilDestroyed(this)\n      )\n      .subscribe(\n        (credentials) => {\n          log.debug(`${credentials.username} successfully logged in`);\n          this.router.navigate([this.route.snapshot.queryParams.redirect || '/'], { replaceUrl: true });\n        },\n        (error) => {\n          log.debug(`Login error: ${error}`);\n          this.error = error;\n        }\n      );\n  }\n\n  private createForm() {\n    this.loginForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n      remember: true,\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/theme/theme-variables\";\n\n:host {\n  display: flex;\n  flex: 1;\n  background-color: #f5f5f5;\n}\n\n.inline-loader {\n  display: inline-block;\n}\n\n.version {\n  margin: 0;\n}\n\n.login-container,\n.mat-form-field {\n  width: 100%;\n}\n\n.login-fields > :not(:last-child) {\n  margin-bottom: 8px;\n}\n\n.login-error {\n  color: mat-color($app-warn);\n}\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxFill fxLayout=\"column\" fxLayoutAlign=\"center center\" fxLayoutGap=\"1.5rem\" class=\"mat-typography\">\n  <div>\n    <h1 fxLayoutAlign=\"center\" translate>APP_NAME</h1>\n    <div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\">\n      <h4 class=\"version\">v{{ version }}</h4>\n      <app-language-selector></app-language-selector>\n    </div>\n  </div>\n  <div class=\"login-container\" fxLayout=\"row\" fxLayoutAlign=\"center\">\n    <mat-card fxFlex=\"90%\" fxFlex.sm=\"66%\" fxFlex.md=\"50%\" fxFlex.gt-md=\"33%\" class=\"login-box\">\n      <form (ngSubmit)=\"login()\" [formGroup]=\"loginForm\" novalidate>\n        <div class=\"login-error\" [hidden]=\"!error || isLoading\" translate>Username or password incorrect.</div>\n        <br />\n        <div class=\"login-fields\" fxLayout=\"column\">\n          <mat-form-field [hideRequiredMarker]=\"true\">\n            <input\n              type=\"text\"\n              matInput\n              formControlName=\"username\"\n              autocomplete=\"username\"\n              [placeholder]=\"'Username' | translate\"\n              required\n            />\n            <mat-error *ngIf=\"loginForm.controls.username.invalid && loginForm.controls.username.touched\">\n              <span translate>Username is required</span>\n            </mat-error>\n          </mat-form-field>\n          <mat-form-field [hideRequiredMarker]=\"true\">\n            <input\n              type=\"password\"\n              matInput\n              formControlName=\"password\"\n              autocomplete=\"current-password\"\n              [placeholder]=\"'Password' | translate\"\n              required\n            />\n            <mat-error *ngIf=\"loginForm.controls.password.invalid && loginForm.controls.password.touched\">\n              <span translate>Password is required</span>\n            </mat-error>\n          </mat-form-field>\n          <mat-slide-toggle color=\"primary\" formControlName=\"remember\" translate>Remember me</mat-slide-toggle>\n          <br />\n          <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"loginForm.invalid || isLoading\">\n            <app-loader class=\"inline-loader\" [isLoading]=\"isLoading\"></app-loader>\n            <span translate>Login</span>\n          </button>\n        </div>\n      </form>\n    </mat-card>\n  </div>\n</div>\n"
        },
        {
            "name": "NewApplicationComponent",
            "id": "component-NewApplicationComponent-a2c3c680c41c9507dc866502580ed16d",
            "file": "src/app/application/new-application/new-application.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "UpperCasePipe",
                    "type": "pipe"
                }
            ],
            "selector": "app-new-application",
            "styleUrls": [
                "./new-application.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./new-application.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isSubmitting",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "createNewEntry",
                    "args": [
                        {
                            "name": "controls",
                            "type": "Controls"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "controls",
                            "type": "Controls",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRandomePasscode",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 108,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { SuccessDialogComponent } from '../success-dialog/success-dialog.component';\nimport { ApplicationService } from '@core/application-service.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { first, catchError, finalize } from 'rxjs/operators';\nimport { Controls, FormConfig } from '@app/@shared/application-form/application-form.model';\nimport { of } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatDialog } from '@angular/material/dialog';\nimport { UpperCasePipe } from '@angular/common';\n\n@Component({\n  selector: 'app-new-application',\n  templateUrl: './new-application.component.html',\n  styleUrls: ['./new-application.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [UpperCasePipe]\n})\nexport class NewApplicationComponent implements OnInit {\n\n  isSubmitting: boolean = false;\n  \n  get now() {\n    return new Date();\n  }\n\n  constructor(\n    private activatedRoute: ActivatedRoute, \n    private applicationService: ApplicationService,\n    private snackBar: MatSnackBar,\n    public dialog: MatDialog,\n    private router: Router,\n    private uppercase: UpperCasePipe\n  ) { \n  }\n\n  ngOnInit(): void {\n  }\n\n  createNewEntry(controls: Controls) {\n    this.isSubmitting = true;\n    const passcode: string = this.uppercase.transform(this.getRandomePasscode());\n\n    this.applicationService.create({\n      State: 'New',\n      PriceUSD: controls.price,\n      AcknowledgementInitials: controls.initials,\n      AcknowledgementText: controls.acknowledgementText,\n      CustomerInformation: {\n        FirstName: controls.firstName,\n        LastName: controls.lastName,\n        Date: controls.date,\n        Address: controls.address,\n        City: controls.city,\n        State: controls.state,\n        Zipcode: controls.zipcode,\n        Phone: controls.phone,\n        Email: controls.email\n      },\n      VehicleInformation: {\n        Year: controls.year,\n        Make: controls.make,\n        Model: controls.model,\n        License: controls.license,\n        Mileage: controls.mileage,\n        VIN: controls.vin\n      },\n      Certificate: [],\n      CertificatePasscode: passcode\n    }).pipe(\n      first(),\n      catchError((errorResponse: HttpErrorResponse) => {\n\n        if(errorResponse?.error?.data?.errors) {\n          const errors = errorResponse?.error?.data?.errors\n\n          let errorStr = ''\n          for(const error in errors){\n            errorStr = errors[error].join('<br>');\n          }\n          this.snackBar.open(errorStr, \"Close\")\n        } else {\n          this.snackBar.open('Something has went wrong, please try again later.', 'Close')\n        }\n\n        return of(errorResponse)\n      }),\n      finalize(() => {\n        this.isSubmitting = false;\n      })\n    ).subscribe((res: HttpErrorResponse|FormConfig) => {\n      if((res as HttpErrorResponse)?.ok === false) return;\n\n      const dialogRef = this.dialog.open(SuccessDialogComponent, {\n        disableClose: true\n      })\n\n      dialogRef.afterClosed().pipe(first()).subscribe(() => {\n        this.router.navigate([(res as FormConfig).id], {\n          relativeTo: this.activatedRoute,\n          state: {passcode}\n        })\n      });\n    })\n  }\n\n  private getRandomePasscode(): string {\n    return Math.random().toString(36).substring(2, 3) + Math.random().toString(36).substring(2, 7);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use \"mixins\" as mixins;\n\n.container {\n    @include mixins.form-container;\n}",
                    "styleUrl": "./new-application.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "applicationService",
                        "type": "ApplicationService"
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar"
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "uppercase",
                        "type": "UpperCasePipe"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "applicationService",
                        "type": "ApplicationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "uppercase",
                        "type": "UpperCasePipe",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "now": {
                    "name": "now",
                    "getSignature": {
                        "name": "now",
                        "type": "",
                        "returnType": "",
                        "line": 24
                    }
                }
            },
            "templateData": "<div class=\"container\">\n    <div>\n        <h1>New Application</h1>\n\n        <app-application-form\n            [date]=\"now\"\n            (formSubmit)=\"createNewEntry($event)\"\n        ></app-application-form>\n    </div>\n</div>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-c0239b0ece1ccb7f2735f617a45203c6",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without needing to navigate to\n        them in your app. Here are some handy patterns for managing page data in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the \"args\" of child\n          component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 62,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 71,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 65,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 68,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without needing to navigate to\n        them in your app. Here are some handy patterns for managing page data in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the \"args\" of child\n          component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "ShellComponent",
            "id": "component-ShellComponent-81fa28cfae58a20798e217a55b5c7476",
            "file": "src/app/shell/shell.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shell",
            "styleUrls": [
                "./shell.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shell.component.html"
            ],
            "viewProviders": [],
            "propertiesClass": [
                {
                    "name": "sidenav",
                    "type": "MatSidenav",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'sidenav', {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MediaChange, MediaObserver } from '@angular/flex-layout';\nimport { MatSidenav } from '@angular/material/sidenav';\nimport { filter } from 'rxjs/operators';\n\nimport { UntilDestroy, untilDestroyed } from '@core';\n\n@UntilDestroy()\n@Component({\n  selector: 'app-shell',\n  templateUrl: './shell.component.html',\n  styleUrls: ['./shell.component.scss'],\n})\nexport class ShellComponent implements OnInit {\n  @ViewChild('sidenav', { static: false }) sidenav!: MatSidenav;\n\n  constructor(private media: MediaObserver) {}\n\n  ngOnInit() {\n    // Automatically close side menu on screens > sm breakpoint\n    this.media\n      .asObservable()\n      .pipe(\n        filter((changes: MediaChange[]) =>\n          changes.some((change) => change.mqAlias !== 'xs' && change.mqAlias !== 'sm')\n        ),\n        untilDestroyed(this)\n      )\n      .subscribe(() => this.sidenav.close());\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/theme/theme-variables\";\n\n:host {\n  display: flex;\n  flex: 1;\n}\n\n.mat-sidenav {\n  min-width: 270px;\n  max-width: 28%;\n}\n\n.has-border {\n  border-right: 1px solid rgba(0, 0, 0, 0.12);\n}\n\n.mat-list {\n  padding-top: 0;\n}\n\n.mat-list-item {\n  text-decoration: none;\n\n  &:hover {\n    background: rgba(0, 0, 0, 0.05);\n  }\n}\n\n.mat-drawer-container {\n  position: unset;\n}\n\n.mat-sidenav,\n.mat-drawer-content,\n// Force style down to child components\n// See https://angular.io/guide/component-styles#deep\n:host ::ng-deep .mat-drawer-backdrop {\n  top: 64px;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  height: auto;\n  position: absolute;\n}\n\n@media ($mat-xsmall) {\n  .mat-sidenav,\n  .mat-drawer-content,\n  :host ::ng-deep .mat-drawer-backdrop {\n    top: 56px;\n  }\n}\n",
                    "styleUrl": "./shell.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "media",
                        "type": "MediaObserver"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "media",
                        "type": "MediaObserver",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxFlex>\n  <app-header [sidenav]=\"sidenav\"></app-header>\n  <mat-sidenav-container fxFill>\n    <mat-sidenav #sidenav mode=\"over\" ngClass.gt-sm=\"has-border\">\n      <nav>\n        <mat-list>\n          <mat-divider></mat-divider>\n          <a mat-list-item routerLink=\"/home\" routerLinkActive=\"active\" (click)=\"sidenav.close()\">\n            <span translate>Home</span>\n          </a>\n          <mat-divider></mat-divider>\n          <a mat-list-item routerLink=\"/about\" routerLinkActive=\"active\" (click)=\"sidenav.close()\">\n            <span translate>About</span>\n          </a>\n          <mat-divider></mat-divider>\n        </mat-list>\n      </nav>\n    </mat-sidenav>\n    <mat-sidenav-content>\n      <router-outlet></router-outlet>\n    </mat-sidenav-content>\n  </mat-sidenav-container>\n</div>\n"
        },
        {
            "name": "SuccessDialogComponent",
            "id": "component-SuccessDialogComponent-8151061811b368be3f1f09c85f3c0920",
            "file": "src/app/application/success-dialog/success-dialog.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-success-dialog",
            "styleUrls": [
                "./success-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./success-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'app-success-dialog',\n  templateUrl: './success-dialog.component.html',\n  styleUrls: ['./success-dialog.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SuccessDialogComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./success-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2>Your application has been successfully submitted!</h2>\n\n<p>Please speak to the technician and you will be assisted further.</p>\n\n<button mat-raised-button color=\"primary\" mat-dialog-close>View my application</button>\n"
        },
        {
            "name": "ViewApplicationComponent",
            "id": "component-ViewApplicationComponent-c91c218b25951f5da14c77efcb6155ed",
            "file": "src/app/application/view-application/view-application.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-view-application",
            "styleUrls": [
                "./view-application.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./view-application.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isFetching",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "passcode",
                    "defaultValue": "null",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "passcordControl",
                    "defaultValue": "new FormControl('')",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "workorder",
                    "defaultValue": "null",
                    "type": "FormConfig",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "fetchWorkOrder",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        },
                        {
                            "name": "passcode",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "passcode",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApplicationId",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 48,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "submitPasscodeAndFetch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { HttpErrorResponse } from '@angular/common/http';\nimport { ApplicationService, ErrorCode } from '@core/application-service.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Component, OnInit, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { catchError, first, finalize, switchMap, map } from 'rxjs/operators';\nimport { BehaviorSubject, of } from 'rxjs';\nimport { FormConfig } from '@app/@shared/application-form/application-form.model';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-view-application',\n  templateUrl: './view-application.component.html',\n  styleUrls: ['./view-application.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ViewApplicationComponent implements OnInit {\n  isFetching: boolean = false;\n  errorMessage: string = '';\n  workorder: FormConfig = null;\n  passcode: string = null;\n  passcordControl: FormControl = new FormControl('');\n\n\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private applicationService: ApplicationService,\n    private cdr: ChangeDetectorRef,\n    private router: Router\n  ) { \n    this.passcode = this.router.getCurrentNavigation().extras?.state?.passcode;\n  }\n\n  ngOnInit(): void {\n    this.getApplicationId().subscribe((id: string) => {\n      if(!!id && !!this.passcode) {\n        this.fetchWorkOrder(id, this.passcode);\n      }\n    })\n  }\n\n  submitPasscodeAndFetch() {\n    this.getApplicationId().subscribe((id) => {\n      this.fetchWorkOrder(id, this.passcordControl.value)\n    })\n  }\n\n  private getApplicationId() {\n    return this.activatedRoute.params.pipe(\n      first(),\n      map((params) => params?.id)\n    );\n  }\n\n  private fetchWorkOrder(id: string, passcode: string) {\n    this.isFetching = true;\n    this.applicationService.getWithPasscode(id,passcode).pipe(\n      first(), \n      catchError((err: HttpErrorResponse) => {\n        if(err.status === 400) {\n          if((err.error.ERROR_CODE as ErrorCode) === 'ID_INVALID') {\n            this.errorMessage = \"The application you are trying to view is not accessible. Please make sure you are using the right link.\"\n          } else if((err.error.ERROR_CODE as ErrorCode) === 'PASSCODE_INVALID') {\n            this.errorMessage = \"The passcode is not correct, please try again.\"\n          }\n        } else {\n          this.errorMessage = err.message;\n        }\n\n        return of(err)\n      })\n    ).subscribe((res: HttpErrorResponse|FormConfig) => {\n      this.isFetching = false;\n\n      if((res as HttpErrorResponse).ok !== false) {\n        this.workorder = res as FormConfig;\n      } \n\n      this.cdr.detectChanges();\n    })\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use \"mixins\" as mixins;\n\n.container {\n    @include mixins.form-container;\n}\n\n.error {\n    color: red;\n}",
                    "styleUrl": "./view-application.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "applicationService",
                        "type": "ApplicationService"
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "applicationService",
                        "type": "ApplicationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\n    <div>\n        <h1>My Application</h1>\n        <ng-container *ngIf=\"!workorder\">\n            <form *ngIf=\"!passcode\" (submit)=\"submitPasscodeAndFetch()\">\n                <mat-form-field  appearance=\"outline\">\n                    <mat-label>Enter Your Passcode</mat-label>\n                    <input matInput placeholder=\"e.g. abc123\" required [formControl]=\"passcordControl\">\n                </mat-form-field>\n                <br>\n                <button mat-raised-button [disabled]=\"isFetching\" color=\"primary\" type=\"submit\">Submit</button>\n            </form>\n\n            <app-loader [isLoading]=\"isFetching\" [size]=\"2\"></app-loader>\n\n            <ng-container *ngIf=\"!!errorMessage\">\n                <p class=\"error\">{{errorMessage}}</p>\n                <button mat-stroked-button color=\"primary\" [routerLink]=\"'/'\">Return Home</button>\n            </ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!!workorder\">\n            <app-application-form\n                [firstName]=\"workorder.CustomerInformation?.FirstName\"\n                [lastName]=\"workorder.CustomerInformation?.LastName\"\n                [address]=\"workorder.CustomerInformation?.Address\"\n                [city]=\"workorder.CustomerInformation?.City\"\n                [state]=\"workorder.CustomerInformation?.State\"\n                [city]=\"workorder.CustomerInformation?.City\"\n                [state]=\"workorder.CustomerInformation?.State\"\n                [zipcode]=\"workorder.CustomerInformation?.Zipcode\"\n                [phone]=\"workorder.CustomerInformation?.Phone\"\n                [email]=\"workorder.CustomerInformation?.Email\"\n                [date]=\"workorder.CustomerInformation?.Date\"\n                [year]=\"workorder.VehicleInformation?.Year\"\n                [make]=\"workorder.VehicleInformation?.Make\"\n                [model]=\"workorder.VehicleInformation?.Model\"\n                [license]=\"workorder.VehicleInformation?.License\"\n                [mileage]=\"workorder.VehicleInformation?.Mileage\"\n                [vin]=\"workorder.VehicleInformation?.VIN\"\n                [price]=\"workorder.PriceUSD\"\n                [acknowledgementText]=\"workorder.AcknowledgementText\"\n                [initials]=\"workorder.AcknowledgementInitials\"\n                [readonly]=\"true\"\n            ></app-application-form>\n        </ng-container>\n        \n        \n    </div>\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AboutModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AboutComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AboutRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AboutRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ApplicationModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NewApplicationComponent"
                        },
                        {
                            "name": "SuccessDialogComponent"
                        },
                        {
                            "name": "ViewApplicationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ApplicationRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ApplicationRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "AuthModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "HomeModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "ShellModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoginComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthRoutingModule"
                        },
                        {
                            "name": "I18nModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ApiPrefixInterceptor"
                        },
                        {
                            "name": "ErrorHandlerInterceptor"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HomeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "HomeRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "I18nModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LanguageSelectorComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LanguageSelectorComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ApplicationFormComponent"
                        },
                        {
                            "name": "LoaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ApplicationFormComponent"
                        },
                        {
                            "name": "LoaderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ShellModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "ShellComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthModule"
                        },
                        {
                            "name": "I18nModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "configureTests",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test-config.helper.ts",
                "type": "",
                "defaultValue": "(configure: ConfigureFn, compilerOptions: CompilerOptions = {}) => {\n  const compilerConfig: CompilerOptions = {\n    preserveWhitespaces: false,\n    ...compilerOptions,\n  };\n\n  const configuredTestBed = TestBed.configureCompiler(compilerConfig);\n\n  configure(configuredTestBed);\n\n  return configuredTestBed.compileComponents().then(() => configuredTestBed);\n}"
            },
            {
                "name": "credentialsKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/credentials.service.ts",
                "type": "string",
                "defaultValue": "'credentials'"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/application-form.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "env",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/.env.ts",
                "type": "literal type",
                "defaultValue": "{\n  'npm_package_version': '1.0.0'\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  version: env.npm_package_version,\n  serverUrl: 'https://api.chucknorris.io',\n  defaultLanguage: 'en-US',\n  supportedLanguages: ['en-US'],\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  version: env.npm_package_version + '-dev',\n  serverUrl: '/api',\n  defaultLanguage: 'en-US',\n  supportedLanguages: ['en-US'],\n}"
            },
            {
                "name": "languageKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/i18n/i18n.service.ts",
                "type": "string",
                "defaultValue": "'language'"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "log",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.component.ts",
                "type": "",
                "defaultValue": "new Logger('App')"
            },
            {
                "name": "log",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/authentication.guard.ts",
                "type": "",
                "defaultValue": "new Logger('AuthenticationGuard')"
            },
            {
                "name": "log",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/login.component.ts",
                "type": "",
                "defaultValue": "new Logger('Login')"
            },
            {
                "name": "log",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/i18n/i18n.service.ts",
                "type": "",
                "defaultValue": "new Logger('I18nService')"
            },
            {
                "name": "log",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/@core/http/error-handler.interceptor.ts",
                "type": "",
                "defaultValue": "new Logger('ErrorHandlerInterceptor')"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/quote.service.ts",
                "type": "object",
                "defaultValue": "{\n  quote: (c: RandomQuoteContext) => `/jokes/random?category=${c.category}`,\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "storageMock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/setup-jest.ts",
                "type": "",
                "defaultValue": "() => {\n  let storage: { [key: string]: string } = {};\n  return {\n    getItem: (key: string) => (key in storage ? storage[key] : null),\n    setItem: (key: string, value: string) => (storage[key] = value || ''),\n    removeItem: (key: string) => delete storage[key],\n    clear: () => (storage = {}),\n  };\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/application-form.stories.ts",
                "type": "Story<ApplicationFormComponent>",
                "defaultValue": "(args: ApplicationFormComponent) => ({\n    props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "CompilerOptions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Partial<literal type>",
                "file": "src/test-config.helper.ts",
                "description": "",
                "kind": 161
            },
            {
                "name": "ConfigureFn",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/test-config.helper.ts",
                "description": "",
                "kind": 162
            },
            {
                "name": "Controls",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/@shared/application-form/application-form.model.ts",
                "description": "",
                "kind": 176
            },
            {
                "name": "ErrorCode",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"ID_INVALID\" | \"PASSCODE_INVALID\"",
                "file": "src/app/@core/application-service.service.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "FormState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"New\" | \"InProgress\" | \"Canceled\" | \"Completed\"",
                "file": "src/app/@shared/application-form/application-form.model.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "LogOutput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/app/@core/logger.service.ts",
                "description": "<p>Log output handler function.</p>\n",
                "kind": 162
            }
        ],
        "enumerations": [
            {
                "name": "ControlName",
                "childs": [
                    {
                        "name": "firstName",
                        "value": "firstName"
                    },
                    {
                        "name": "lastName",
                        "value": "lastName"
                    },
                    {
                        "name": "address",
                        "value": "address"
                    },
                    {
                        "name": "city",
                        "value": "city"
                    },
                    {
                        "name": "state",
                        "value": "state"
                    },
                    {
                        "name": "zipcode",
                        "value": "zipcode"
                    },
                    {
                        "name": "phone",
                        "value": "phone"
                    },
                    {
                        "name": "email",
                        "value": "email"
                    },
                    {
                        "name": "date",
                        "value": "date"
                    },
                    {
                        "name": "year",
                        "value": "year"
                    },
                    {
                        "name": "make",
                        "value": "make"
                    },
                    {
                        "name": "model",
                        "value": "model"
                    },
                    {
                        "name": "license",
                        "value": "license"
                    },
                    {
                        "name": "mileage",
                        "value": "mileage"
                    },
                    {
                        "name": "vin",
                        "value": "vin"
                    },
                    {
                        "name": "price",
                        "value": "price"
                    },
                    {
                        "name": "initials",
                        "value": "initials"
                    },
                    {
                        "name": "acknowledgementText",
                        "value": "acknowledgementText"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/@shared/application-form/application-form.model.ts"
            },
            {
                "name": "LogLevel",
                "childs": [
                    {
                        "name": "Off",
                        "value": "0"
                    },
                    {
                        "name": "Error"
                    },
                    {
                        "name": "Warning"
                    },
                    {
                        "name": "Info"
                    },
                    {
                        "name": "Debug"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "<p>Simple logger system with the possibility of registering custom outputs.</p>\n<p>4 different log levels are provided, with corresponding methods:</p>\n<ul>\n<li>debug   : for debug information</li>\n<li>info    : for informative status of the application (success, ...)</li>\n<li>warning : for non-critical errors that do not prevent normal application behavior</li>\n<li>error   : for critical errors that prevent normal application behavior</li>\n</ul>\n<p>Example usage:</p>\n<div><pre class=\"line-numbers\"><code class=\"language-none\"> * import { Logger } from &#39;app/core/logger.service&#39;;\n *\n * const log = new Logger(&#39;myFile&#39;);\n * ...\n * log.debug(&#39;something happened&#39;);\n * ```\n\nTo disable debug and info logs in production, add this snippet to your root component:</code></pre></div><ul>\n<li>export class AppComponent implements OnInit {</li>\n<li>ngOnInit() {</li>\n<li>if (environment.production) {</li>\n<li>Logger.enableProductionMode();</li>\n<li>}</li>\n<li>...</li>\n<li>}</li>\n<li>}</li>\n<li></li>\n<li>If you want to process logs through other outputs than console, you can add LogOutput functions to Logger.outputs.</li>\n<li></li>\n</ul>\n",
                "file": "src/app/@core/logger.service.ts"
            }
        ],
        "groupedVariables": {
            "src/test-config.helper.ts": [
                {
                    "name": "configureTests",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test-config.helper.ts",
                    "type": "",
                    "defaultValue": "(configure: ConfigureFn, compilerOptions: CompilerOptions = {}) => {\n  const compilerConfig: CompilerOptions = {\n    preserveWhitespaces: false,\n    ...compilerOptions,\n  };\n\n  const configuredTestBed = TestBed.configureCompiler(compilerConfig);\n\n  configure(configuredTestBed);\n\n  return configuredTestBed.compileComponents().then(() => configuredTestBed);\n}"
                }
            ],
            "src/app/auth/credentials.service.ts": [
                {
                    "name": "credentialsKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/credentials.service.ts",
                    "type": "string",
                    "defaultValue": "'credentials'"
                }
            ],
            "src/stories/application-form.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/application-form.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/application-form.stories.ts",
                    "type": "Story<ApplicationFormComponent>",
                    "defaultValue": "(args: ApplicationFormComponent) => ({\n    props: args,\n})"
                }
            ],
            "src/environments/.env.ts": [
                {
                    "name": "env",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/.env.ts",
                    "type": "literal type",
                    "defaultValue": "{\n  'npm_package_version': '1.0.0'\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  version: env.npm_package_version,\n  serverUrl: 'https://api.chucknorris.io',\n  defaultLanguage: 'en-US',\n  supportedLanguages: ['en-US'],\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  version: env.npm_package_version + '-dev',\n  serverUrl: '/api',\n  defaultLanguage: 'en-US',\n  supportedLanguages: ['en-US'],\n}"
                }
            ],
            "src/app/i18n/i18n.service.ts": [
                {
                    "name": "languageKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/i18n/i18n.service.ts",
                    "type": "string",
                    "defaultValue": "'language'"
                },
                {
                    "name": "log",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/i18n/i18n.service.ts",
                    "type": "",
                    "defaultValue": "new Logger('I18nService')"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/app/app.component.ts": [
                {
                    "name": "log",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.component.ts",
                    "type": "",
                    "defaultValue": "new Logger('App')"
                }
            ],
            "src/app/auth/authentication.guard.ts": [
                {
                    "name": "log",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/authentication.guard.ts",
                    "type": "",
                    "defaultValue": "new Logger('AuthenticationGuard')"
                }
            ],
            "src/app/auth/login.component.ts": [
                {
                    "name": "log",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/login.component.ts",
                    "type": "",
                    "defaultValue": "new Logger('Login')"
                }
            ],
            "src/app/@core/http/error-handler.interceptor.ts": [
                {
                    "name": "log",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/@core/http/error-handler.interceptor.ts",
                    "type": "",
                    "defaultValue": "new Logger('ErrorHandlerInterceptor')"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "src/app/home/quote.service.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/quote.service.ts",
                    "type": "object",
                    "defaultValue": "{\n  quote: (c: RandomQuoteContext) => `/jokes/random?category=${c.category}`,\n}"
                }
            ],
            "src/setup-jest.ts": [
                {
                    "name": "storageMock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/setup-jest.ts",
                    "type": "",
                    "defaultValue": "() => {\n  let storage: { [key: string]: string } = {};\n  return {\n    getItem: (key: string) => (key in storage ? storage[key] : null),\n    setItem: (key: string, value: string) => (storage[key] = value || ''),\n    removeItem: (key: string) => delete storage[key],\n    clear: () => (storage = {}),\n  };\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/@shared/application-form/application-form.model.ts": [
                {
                    "name": "ControlName",
                    "childs": [
                        {
                            "name": "firstName",
                            "value": "firstName"
                        },
                        {
                            "name": "lastName",
                            "value": "lastName"
                        },
                        {
                            "name": "address",
                            "value": "address"
                        },
                        {
                            "name": "city",
                            "value": "city"
                        },
                        {
                            "name": "state",
                            "value": "state"
                        },
                        {
                            "name": "zipcode",
                            "value": "zipcode"
                        },
                        {
                            "name": "phone",
                            "value": "phone"
                        },
                        {
                            "name": "email",
                            "value": "email"
                        },
                        {
                            "name": "date",
                            "value": "date"
                        },
                        {
                            "name": "year",
                            "value": "year"
                        },
                        {
                            "name": "make",
                            "value": "make"
                        },
                        {
                            "name": "model",
                            "value": "model"
                        },
                        {
                            "name": "license",
                            "value": "license"
                        },
                        {
                            "name": "mileage",
                            "value": "mileage"
                        },
                        {
                            "name": "vin",
                            "value": "vin"
                        },
                        {
                            "name": "price",
                            "value": "price"
                        },
                        {
                            "name": "initials",
                            "value": "initials"
                        },
                        {
                            "name": "acknowledgementText",
                            "value": "acknowledgementText"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/@shared/application-form/application-form.model.ts"
                }
            ],
            "src/app/@core/logger.service.ts": [
                {
                    "name": "LogLevel",
                    "childs": [
                        {
                            "name": "Off",
                            "value": "0"
                        },
                        {
                            "name": "Error"
                        },
                        {
                            "name": "Warning"
                        },
                        {
                            "name": "Info"
                        },
                        {
                            "name": "Debug"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "<p>Simple logger system with the possibility of registering custom outputs.</p>\n<p>4 different log levels are provided, with corresponding methods:</p>\n<ul>\n<li>debug   : for debug information</li>\n<li>info    : for informative status of the application (success, ...)</li>\n<li>warning : for non-critical errors that do not prevent normal application behavior</li>\n<li>error   : for critical errors that prevent normal application behavior</li>\n</ul>\n<p>Example usage:</p>\n<div><pre class=\"line-numbers\"><code class=\"language-none\"> * import { Logger } from &#39;app/core/logger.service&#39;;\n *\n * const log = new Logger(&#39;myFile&#39;);\n * ...\n * log.debug(&#39;something happened&#39;);\n * ```\n\nTo disable debug and info logs in production, add this snippet to your root component:</code></pre></div><ul>\n<li>export class AppComponent implements OnInit {</li>\n<li>ngOnInit() {</li>\n<li>if (environment.production) {</li>\n<li>Logger.enableProductionMode();</li>\n<li>}</li>\n<li>...</li>\n<li>}</li>\n<li>}</li>\n<li></li>\n<li>If you want to process logs through other outputs than console, you can add LogOutput functions to Logger.outputs.</li>\n<li></li>\n</ul>\n",
                    "file": "src/app/@core/logger.service.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/test-config.helper.ts": [
                {
                    "name": "CompilerOptions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Partial<literal type>",
                    "file": "src/test-config.helper.ts",
                    "description": "",
                    "kind": 161
                },
                {
                    "name": "ConfigureFn",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/test-config.helper.ts",
                    "description": "",
                    "kind": 162
                }
            ],
            "src/app/@shared/application-form/application-form.model.ts": [
                {
                    "name": "Controls",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/@shared/application-form/application-form.model.ts",
                    "description": "",
                    "kind": 176
                },
                {
                    "name": "FormState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"New\" | \"InProgress\" | \"Canceled\" | \"Completed\"",
                    "file": "src/app/@shared/application-form/application-form.model.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/@core/application-service.service.ts": [
                {
                    "name": "ErrorCode",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"ID_INVALID\" | \"PASSCODE_INVALID\"",
                    "file": "src/app/@core/application-service.service.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/@core/logger.service.ts": [
                {
                    "name": "LogOutput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/app/@core/logger.service.ts",
                    "description": "<p>Log output handler function.</p>\n",
                    "kind": 162
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    "Shell.childRoutes([{path:'about',loadChildren:()=>import('./about/about.module').then((m)=>m.AboutModule),},{path:'application',loadChildren:()=>import('./application/application.module').then((m)=>m.ApplicationModule)}])",
                    {
                        "path": "**",
                        "redirectTo": "",
                        "pathMatch": "full"
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/home/home-routing.module.ts",
                "module": "HomeRoutingModule",
                "children": [
                    "Shell.childRoutes([{path:'',redirectTo:'/home',pathMatch:'full'},{path:'home',component:HomeComponent,data:{title:marker('Home')}}])"
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/auth/auth-routing.module.ts",
                "module": "AuthRoutingModule",
                "children": [
                    {
                        "path": "login",
                        "component": "LoginComponent",
                        "data": {
                            "title": "marker('Login')"
                        }
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 7,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/page-objects/app-shared.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppSharedPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "e2e/src/page-objects/login.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoginPage",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "e2e/src/page-objects/shell.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ShellPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/application-service.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApplicationService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/application-service.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreatePayload",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/http/api-prefix.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "ApiPrefixInterceptor",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/app/@core/http/error-handler.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "ErrorHandlerInterceptor",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/@core/http/error-handler.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "log",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/logger.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Logger",
                "coveragePercent": 70,
                "coverageCount": "7/10",
                "status": "good"
            },
            {
                "filePath": "src/app/@core/route-reusable-strategy.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RouteReusableStrategy",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/application-form/application-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ApplicationFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/application-form/application-form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CustomerInformation",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/application-form/application-form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FormConfig",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/application-form/application-form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Upload",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/application-form/application-form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "VehicleInformation",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/loader/loader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/about/about.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AboutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "log",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/application/new-application/new-application.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NewApplicationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/application/success-dialog/success-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SuccessDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/application/view-application/view-application.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ViewApplicationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/authentication.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthenticationGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/authentication.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "log",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/authentication.service.mock.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MockAuthenticationService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/authentication.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthenticationService",
                "coveragePercent": 75,
                "coverageCount": "3/4",
                "status": "good"
            },
            {
                "filePath": "src/app/auth/authentication.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginContext",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/credentials.service.mock.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MockCredentialsService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/credentials.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CredentialsService",
                "coveragePercent": 60,
                "coverageCount": "3/5",
                "status": "good"
            },
            {
                "filePath": "src/app/auth/credentials.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Credentials",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/credentials.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "credentialsKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/login.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "log",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/home/quote.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QuoteService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/home/quote.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RandomQuoteContext",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/home/quote.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/i18n/i18n.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "I18nService",
                "coveragePercent": 28,
                "coverageCount": "2/7",
                "status": "medium"
            },
            {
                "filePath": "src/app/i18n/i18n.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "languageKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/i18n/i18n.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "log",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/i18n/language-selector.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LanguageSelectorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shell/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shell/shell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shell/shell.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Shell",
                "coveragePercent": 100,
                "coverageCount": "2/2",
                "status": "very-good"
            },
            {
                "filePath": "src/environments/.env.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "env",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/setup-jest.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "storageMock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/application-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/application-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test-config.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "configureTests",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}